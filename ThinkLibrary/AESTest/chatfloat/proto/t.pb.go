// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: t.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PROTO_A struct {
	Number1 string  `protobuf:"bytes,1,opt,name=Number1,proto3" json:"Number1,omitempty"`
	Number2 float32 `protobuf:"fixed32,2,opt,name=Number2,proto3" json:"Number2,omitempty"`
	Number3 float64 `protobuf:"fixed64,3,opt,name=Number3,proto3" json:"Number3,omitempty"`
}

func (m *PROTO_A) Reset()         { *m = PROTO_A{} }
func (m *PROTO_A) String() string { return proto.CompactTextString(m) }
func (*PROTO_A) ProtoMessage()    {}
func (*PROTO_A) Descriptor() ([]byte, []int) {
	return fileDescriptor_t_9e1c8e5f0b7163c6, []int{0}
}
func (m *PROTO_A) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PROTO_A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PROTO_A.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PROTO_A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PROTO_A.Merge(dst, src)
}
func (m *PROTO_A) XXX_Size() int {
	return m.Size()
}
func (m *PROTO_A) XXX_DiscardUnknown() {
	xxx_messageInfo_PROTO_A.DiscardUnknown(m)
}

var xxx_messageInfo_PROTO_A proto.InternalMessageInfo

func (m *PROTO_A) GetNumber1() string {
	if m != nil {
		return m.Number1
	}
	return ""
}

func (m *PROTO_A) GetNumber2() float32 {
	if m != nil {
		return m.Number2
	}
	return 0
}

func (m *PROTO_A) GetNumber3() float64 {
	if m != nil {
		return m.Number3
	}
	return 0
}

func init() {
	proto.RegisterType((*PROTO_A)(nil), "proto.PROTO_A")
}
func (m *PROTO_A) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PROTO_A) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Number1) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintT(dAtA, i, uint64(len(m.Number1)))
		i += copy(dAtA[i:], m.Number1)
	}
	if m.Number2 != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Number2))))
		i += 4
	}
	if m.Number3 != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Number3))))
		i += 8
	}
	return i, nil
}

func encodeVarintT(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PROTO_A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number1)
	if l > 0 {
		n += 1 + l + sovT(uint64(l))
	}
	if m.Number2 != 0 {
		n += 5
	}
	if m.Number3 != 0 {
		n += 9
	}
	return n
}

func sovT(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozT(x uint64) (n int) {
	return sovT(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PROTO_A) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowT
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PROTO_A: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PROTO_A: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowT
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthT
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Number2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Number3 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipT(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthT
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipT(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowT
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowT
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowT
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthT
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowT
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipT(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthT = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowT   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("t.proto", fileDescriptor_t_9e1c8e5f0b7163c6) }

var fileDescriptor_t_9e1c8e5f0b7163c6 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x62, 0x2f, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xe1, 0x5c, 0xec, 0x01, 0x41, 0xfe, 0x21, 0xfe,
	0xf1, 0x8e, 0x42, 0x12, 0x5c, 0xec, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x86, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x30, 0x2e, 0x42, 0xc6, 0x48, 0x82, 0x49, 0x81, 0x51, 0x83, 0x09, 0x26,
	0x63, 0x84, 0x90, 0x31, 0x96, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x84, 0xc9, 0x18, 0x3b, 0x49, 0x9c,
	0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31,
	0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x66, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x95, 0x4d, 0x59, 0x46, 0x8b, 0x00, 0x00, 0x00,
}
