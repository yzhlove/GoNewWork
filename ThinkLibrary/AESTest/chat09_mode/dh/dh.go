package dh

import (
	"crypto/rand"
	"errors"
	"math/big"
)

var (
	p = big.NewInt(0).SetBytes(
		[]byte{
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
			0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
			0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
			0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22,
			0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
			0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B,
			0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
			0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45,
			0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
			0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x3A, 0x36, 0x20,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		},
	)
	g    = big.NewInt(2)
	zero = big.NewInt(0)
)

type DhKey struct {
	PubKey *big.Int
	PriKey *big.Int
}

func GenerateKey() (*DhKey, error) {
	var err error
	var x *big.Int

	for {
		if x, err = rand.Int(rand.Reader, p); err != nil {
			return nil, err
		}

		if zero.Cmp(x) < 0 {
			break
		}
	}

	return &DhKey{PriKey: x, PubKey: big.NewInt(0).Exp(g, x, p)}, nil
}

func ComputeKey(pubKey, priKey *big.Int) (*big.Int, error) {
	if pubKey == nil || priKey == nil {
		return nil, errors.New("invalid key")
	}
	// pub => [1 , p]
	if pubKey.Sign() > 0 && pubKey.Cmp(p) <= 0 {
		return big.NewInt(0).Exp(pubKey, priKey, p), nil
	}
	return nil, errors.New("key out of bound")
}
