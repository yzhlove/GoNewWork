// Code generated by MockGen. DO NOT EDIT.
// Source: def.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeferDataBase is a mock of DeferDataBase interface.
type MockDeferDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockDeferDataBaseMockRecorder
}

// MockDeferDataBaseMockRecorder is the mock recorder for MockDeferDataBase.
type MockDeferDataBaseMockRecorder struct {
	mock *MockDeferDataBase
}

// NewMockDeferDataBase creates a new mock instance.
func NewMockDeferDataBase(ctrl *gomock.Controller) *MockDeferDataBase {
	mock := &MockDeferDataBase{ctrl: ctrl}
	mock.recorder = &MockDeferDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeferDataBase) EXPECT() *MockDeferDataBaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDeferDataBase) Get(key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeferDataBaseMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeferDataBase)(nil).Get), key)
}
