package proto

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z AItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "Qty"
	o = append(o, 0xa3, 0x51, 0x74, 0x79)
	o = msgp.AppendUint32(o, z.Qty)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Qty":
			z.Qty, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Qty")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AItem) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 4 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AItems) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "List"
	o = append(o, 0x81, 0xa4, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.List)))
	for za0001 := range z.List {
		// map header, size 2
		// string "Id"
		o = append(o, 0x82, 0xa2, 0x49, 0x64)
		o = msgp.AppendUint32(o, z.List[za0001].Id)
		// string "Qty"
		o = append(o, 0xa3, 0x51, 0x74, 0x79)
		o = msgp.AppendUint32(o, z.List[za0001].Qty)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AItems) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "List":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "List")
				return
			}
			if cap(z.List) >= int(zb0002) {
				z.List = (z.List)[:zb0002]
			} else {
				z.List = make([]AItem, zb0002)
			}
			for za0001 := range z.List {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "List", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "List", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.List[za0001].Id, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001, "Id")
							return
						}
					case "Qty":
						z.List[za0001].Qty, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001, "Qty")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AItems) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize + (len(z.List) * (8 + msgp.Uint32Size + msgp.Uint32Size))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	if z.Id == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Qty == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "a"
		o = append(o, 0xa1, 0x61)
		o = msgp.AppendUint32(o, z.Id)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "b"
		o = append(o, 0xa1, 0x62)
		o = msgp.AppendUint32(o, z.Qty)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "b":
			z.Qty, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Qty")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BItem) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BItems) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	if z.List == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "c"
		o = append(o, 0xa1, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.List)))
		for za0001 := range z.List {
			// omitempty: check for empty values
			zb0002Len := uint32(2)
			var zb0002Mask uint8 /* 2 bits */
			if z.List[za0001].Id == 0 {
				zb0002Len--
				zb0002Mask |= 0x1
			}
			if z.List[za0001].Qty == 0 {
				zb0002Len--
				zb0002Mask |= 0x2
			}
			// variable map header, size zb0002Len
			o = append(o, 0x80|uint8(zb0002Len))
			if (zb0002Mask & 0x1) == 0 { // if not empty
				// string "a"
				o = append(o, 0xa1, 0x61)
				o = msgp.AppendUint32(o, z.List[za0001].Id)
			}
			if (zb0002Mask & 0x2) == 0 { // if not empty
				// string "b"
				o = append(o, 0xa1, 0x62)
				o = msgp.AppendUint32(o, z.List[za0001].Qty)
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BItems) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "List")
				return
			}
			if cap(z.List) >= int(zb0002) {
				z.List = (z.List)[:zb0002]
			} else {
				z.List = make([]BItem, zb0002)
			}
			for za0001 := range z.List {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "List", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "List", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						z.List[za0001].Id, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001, "Id")
							return
						}
					case "b":
						z.List[za0001].Qty, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001, "Qty")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "List", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BItems) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (len(z.List) * (5 + msgp.Uint32Size + msgp.Uint32Size))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint32(o, z.Id)
	o = msgp.AppendUint32(o, z.Qty)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Id, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	z.Qty, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Qty")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CItem) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CItems) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	if z.List == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "c"
		o = append(o, 0xa1, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.List)))
		for za0001 := range z.List {
			// array header, size 2
			o = append(o, 0x92)
			o = msgp.AppendUint32(o, z.List[za0001].Id)
			o = msgp.AppendUint32(o, z.List[za0001].Qty)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CItems) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "List")
				return
			}
			if cap(z.List) >= int(zb0002) {
				z.List = (z.List)[:zb0002]
			} else {
				z.List = make([]CItem, zb0002)
			}
			for za0001 := range z.List {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "List", za0001)
					return
				}
				if zb0003 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0003}
					return
				}
				z.List[za0001].Id, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "List", za0001, "Id")
					return
				}
				z.List[za0001].Qty, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "List", za0001, "Qty")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CItems) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (len(z.List) * (8 + msgp.Uint32Size + msgp.Uint32Size))
	return
}
