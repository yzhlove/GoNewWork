// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: b.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BClient is the client API for B service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BClient interface {
	Echo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
}

type bClient struct {
	cc *grpc.ClientConn
}

func NewBClient(cc *grpc.ClientConn) BClient {
	return &bClient{cc}
}

func (c *bClient) Echo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.B/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BServer is the server API for B service.
type BServer interface {
	Echo(context.Context, *String) (*String, error)
}

func RegisterBServer(s *grpc.Server, srv BServer) {
	s.RegisterService(&_B_serviceDesc, srv)
}

func _B_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.B/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BServer).Echo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _B_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.B",
	HandlerType: (*BServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _B_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "b.proto",
}

func init() { proto.RegisterFile("b.proto", fileDescriptor_b_b59c369e5e334942) }

var fileDescriptor_b_b59c369e5e334942 = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x62, 0x4f, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xec, 0x89, 0x10, 0xbe, 0x91, 0x26, 0x17, 0xa3,
	0x93, 0x90, 0x0a, 0x17, 0x8b, 0x6b, 0x72, 0x46, 0xbe, 0x10, 0x2f, 0x44, 0x50, 0x2f, 0xb8, 0xa4,
	0x28, 0x33, 0x2f, 0x5d, 0x0a, 0x95, 0xeb, 0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7,
	0x72, 0x0c, 0x49, 0x6c, 0x60, 0x75, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x09, 0x39,
	0x12, 0x66, 0x00, 0x00, 0x00,
}
