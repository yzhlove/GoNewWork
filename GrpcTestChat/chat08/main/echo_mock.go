// Code generated by MockGen. DO NOT EDIT.
// Source: echo.pb.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	echo "grpc-test-chat/chat08/echo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockHelloServiceClient is a mock of HelloServiceClient interface.
type MockHelloServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceClientMockRecorder
}

// MockHelloServiceClientMockRecorder is the mock recorder for MockHelloServiceClient.
type MockHelloServiceClientMockRecorder struct {
	mock *MockHelloServiceClient
}

// NewMockHelloServiceClient creates a new mock instance.
func NewMockHelloServiceClient(ctrl *gomock.Controller) *MockHelloServiceClient {
	mock := &MockHelloServiceClient{ctrl: ctrl}
	mock.recorder = &MockHelloServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloServiceClient) EXPECT() *MockHelloServiceClientMockRecorder {
	return m.recorder
}

// Echo mocks base method.
func (m *MockHelloServiceClient) Echo(ctx context.Context, in *echo.Req, opts ...grpc.CallOption) (*echo.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*echo.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo.
func (mr *MockHelloServiceClientMockRecorder) Echo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockHelloServiceClient)(nil).Echo), varargs...)
}

// MockHelloServiceServer is a mock of HelloServiceServer interface.
type MockHelloServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceServerMockRecorder
}

// MockHelloServiceServerMockRecorder is the mock recorder for MockHelloServiceServer.
type MockHelloServiceServerMockRecorder struct {
	mock *MockHelloServiceServer
}

// NewMockHelloServiceServer creates a new mock instance.
func NewMockHelloServiceServer(ctrl *gomock.Controller) *MockHelloServiceServer {
	mock := &MockHelloServiceServer{ctrl: ctrl}
	mock.recorder = &MockHelloServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloServiceServer) EXPECT() *MockHelloServiceServerMockRecorder {
	return m.recorder
}

// Echo mocks base method.
func (m *MockHelloServiceServer) Echo(arg0 context.Context, arg1 *echo.Req) (*echo.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*echo.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo.
func (mr *MockHelloServiceServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockHelloServiceServer)(nil).Echo), arg0, arg1)
}
