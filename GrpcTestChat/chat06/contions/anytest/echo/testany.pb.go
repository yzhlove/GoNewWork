// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testany.proto

package echo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_582ca1cc52d9ca6e, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type User struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  uint32   `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Password             []byte   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_582ca1cc52d9ca6e, []int{1}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type Resp struct {
	Inter                *any.Any `protobuf:"bytes,1,opt,name=inter,proto3" json:"inter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_582ca1cc52d9ca6e, []int{2}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetInter() *any.Any {
	if m != nil {
		return m.Inter
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "echo.Req")
	proto.RegisterType((*User)(nil), "echo.User")
	proto.RegisterType((*Resp)(nil), "echo.Resp")
}

func init() { proto.RegisterFile("testany.proto", fileDescriptor_582ca1cc52d9ca6e) }

var fileDescriptor_582ca1cc52d9ca6e = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x41, 0x4b, 0xc5, 0x30,
	0x10, 0x84, 0x89, 0x8d, 0x8f, 0xf7, 0x56, 0x0b, 0xb2, 0x78, 0x68, 0x0b, 0x42, 0xe9, 0xa9, 0x7a,
	0x48, 0xa1, 0xfe, 0x02, 0x05, 0xc1, 0x73, 0xd0, 0x8b, 0xb7, 0xb4, 0xae, 0xad, 0xa0, 0x49, 0x9a,
	0x44, 0xa4, 0xff, 0x5e, 0x9a, 0xd2, 0x9e, 0xbc, 0x7d, 0xbb, 0x33, 0x0c, 0x33, 0x90, 0x06, 0xf2,
	0x41, 0xe9, 0x59, 0x58, 0x67, 0x82, 0x41, 0x4e, 0xfd, 0x68, 0x8a, 0x7c, 0x30, 0x66, 0xf8, 0xa2,
	0x26, 0xfe, 0xba, 0x9f, 0x8f, 0x66, 0x37, 0x54, 0x39, 0x24, 0x92, 0x26, 0x44, 0xe0, 0x5a, 0x7d,
	0x53, 0xc6, 0x4a, 0x56, 0x9f, 0x64, 0xe4, 0xea, 0x19, 0xf8, 0xab, 0x27, 0xf7, 0x9f, 0x86, 0x57,
	0x90, 0xa8, 0x81, 0xb2, 0xb3, 0x92, 0xd5, 0xa9, 0x5c, 0x10, 0x0b, 0x38, 0x5a, 0xe5, 0xfd, 0xaf,
	0x71, 0xef, 0x59, 0x52, 0xb2, 0xfa, 0x52, 0xee, 0x77, 0xd5, 0x02, 0x97, 0xe4, 0x2d, 0xde, 0xc1,
	0xf9, 0xa7, 0x0e, 0xe4, 0x62, 0xd4, 0x45, 0x7b, 0x2d, 0xd6, 0x5e, 0x62, 0xeb, 0x25, 0x1e, 0xf4,
	0x2c, 0x57, 0x4b, 0x7b, 0x0b, 0xc7, 0xa7, 0x7e, 0x34, 0x2f, 0xe4, 0x03, 0xde, 0x00, 0x5f, 0x18,
	0x4f, 0x62, 0x99, 0x23, 0x24, 0x4d, 0x05, 0x6c, 0xe8, 0xed, 0xe3, 0xe1, 0x2d, 0xce, 0xec, 0x0e,
	0x31, 0xe7, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xaa, 0xd7, 0xb9, 0x04, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoTestClient is the client API for EchoTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoTestClient interface {
	Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type echoTestClient struct {
	cc *grpc.ClientConn
}

func NewEchoTestClient(cc *grpc.ClientConn) EchoTestClient {
	return &echoTestClient{cc}
}

func (c *echoTestClient) Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/echo.EchoTest/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoTestServer is the server API for EchoTest service.
type EchoTestServer interface {
	Echo(context.Context, *Req) (*Resp, error)
}

// UnimplementedEchoTestServer can be embedded to have forward compatible implementations.
type UnimplementedEchoTestServer struct {
}

func (*UnimplementedEchoTestServer) Echo(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterEchoTestServer(s *grpc.Server, srv EchoTestServer) {
	s.RegisterService(&_EchoTest_serviceDesc, srv)
}

func _EchoTest_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoTestServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoTest/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoTestServer).Echo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoTest",
	HandlerType: (*EchoTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoTest_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testany.proto",
}
